[
  {
    "name": "Functional Equivalence",
    "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
    "url": "http://172.16.5.29:8000/v1",
    "prompt_template": "Evaluate whether the translated code preserves input/output behavior, control flow, and data structure integrity. Ensure the translation maintains the original algorithm's time and space complexity without introducing inefficiencies.\n\nEvaluation Criteria:\n- *Preservation of Input/Output Behavior*: This criterion evaluates whether the translated code maintains the same input types, order, and behavior, as well as whether the output matches the original in structure, type, and content. Edge cases related to inputs, such as null or empty values, must also be handled consistently between the source and target code.\n- *Correctness of Control Flow and Logic*: This measures whether key control flow elements (e.g., loops, conditionals, and function calls) are correctly translated without changes to the logical structure of the code. The order of execution and decisions made by the code must reflect the original.\n- *Accuracy in Handling Data Structures*: Evaluates how well data structures (e.g., arrays, lists, dictionaries) are maintained in the translation. This includes ensuring that data integrity (size, shape, and content) is not compromised, and that operations like insertion, deletion, and access work as expected.\n- *Consistency in Algorithmic Complexity*: This criterion focuses on whether the time and space complexity of the source algorithm is preserved in the translated code. It checks for performance degradation, unnecessary overhead, or inefficient translations that could alter the computational characteristics of the original code.\n\nScoring: Rate outputs on a scale of 1 (lowest) to 5 (highest)\n- *Score 5 (Perfect Functional Equivalence)*: The translated code maintains complete consistency with the source code, preserving all input/output behavior, logic, and control flow without any functional discrepancies. Both performance and edge cases are handled identically.\n- *Score 4 (Minor Deviations, No Functional Impact)*: The code is almost identical to the source, with only minor differences (e.g., syntax or slight changes in structure) that do not affect functionality. Edge cases and performance remain intact.\n- *Score 3 (Functional but Slight Behavioral Differences)*: The translated code works as expected but introduces slight behavioral changes or minor issues in edge cases or performance (e.g., small differences in rounding or precision).\n- *Score 2 (Major Functional Gaps but Partial Equivalence)*: The code functions correctly for most common cases, but there are significant functional gaps, such as missing or misinterpreted edge cases or incorrect handling of data structures. It may fail under certain conditions.\n- *Score 1 (Severe Functional Breakdown)*: The translated code exhibits major deviations from the original functionality. Core logic, input/output handling, or control flow is broken, leading to incorrect or inconsistent results across multiple cases.\n\n\n Source code in {src_lang}:\n{source_code}\n\n Translated code in {trg_lang}:\n{translated_code}\n\nYour output should have two parts:\n- \"score\": A score from 1 to 5.\n- \"rationale\": A brief explanation justifying your score.\n\n"
  },
  {
    "name": "Language Conventions and Idiomatic",
    "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
    "url": "http://172.16.5.29:8000/v1",
    "prompt_template": "Evaluate the accuracy and quality of code translation based on adherence to the target language's conventions and idiomatic usage. Assess how well the translated code maintains the original program's logic while leveraging the target language's conventions and idiomatic usage.\n\nEvaluation Criteria:\n- *Adherence to Target Language Syntax*: This criterion evaluates whether the code follows the target language's syntax rules, avoiding syntax errors and maintaining correct structure. The translated code should be error-free and align with idiomatic constructs native to the target language.\n- *Use of Language-Specific Idioms*: Assesses whether the translated code utilizes idiomatic patterns and practices specific to the target language. The goal is to avoid literal translations that result in unnatural or inefficient code.\n- *Following Naming Conventions*: This criterion checks if the code follows the target language's naming conventions for variables, functions, classes, and other identifiers. The names should be meaningful and follow the language's standard style.\n- *Leveraging Built-in Functions and Libraries*: Evaluates whether the code effectively uses the built-in functions, libraries, or frameworks of the target language to achieve equivalent functionality, avoiding redundant implementations of existing features.\n\nScoring: Rate outputs on a scale of 1 (lowest) to 5 (highest)\n\n- *Score 5 (Native Proficiency)*: The code perfectly adheres to all idiomatic and syntax conventions of the target language. It reads as if written by an experienced native developer, using idiomatic constructs naturally and efficiently, without any errors or inconsistencies.\n- *Score 4 (Near-Native Proficiency)*: The code mostly follows the idiomatic patterns and syntax of the target language with only minor deviations. These small issues, such as slight misuses of idiomatic expressions or less optimal naming conventions, do not affect the overall functionality or readability of the code.\n- *Score 3 (Functional but Awkward)*: The code is mostly functional and runs in the target language, but it shows clear signs of non-native understanding. There are several non-idiomatic constructs, inconsistent naming conventions, or awkward usages of syntax, which make the code feel less natural to a native programmer.\n- *Score 2 (Partially Correct but Inefficient)*: The code shows significant problems with following idiomatic conventions and syntax rules. Although the code might still function with adjustments, it contains multiple instances of awkward or incorrect usage, making it less readable, inefficient, or prone to errors.\n- *Score 1 (Non-Idiomatic and Error-Prone)*: The code completely fails to follow the conventions, idioms, and syntax of the target language. It contains many errors and awkward constructs, making it appear like a literal translation with little regard for the target language's practices, and it likely won't run without major corrections.\n\n\n Source code in {src_lang}:\n{source_code}\n\n Translated code in {trg_lang}:\n{translated_code}\n\nYour output should have two parts:\n- \"score\": A score from 1 to 5.\n- \"rationale\": A brief explanation justifying your score.\n\n"
  },
  {
    "name": "Readability and Structure",
    "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
    "url": "http://172.16.5.29:8000/v1",
    "prompt_template": "Evaluate how easy it is to understand the translated code, while the translated code maintains the original program's logic. This includes clarity of variable names, simplicity of the logic, and overall structure that makes the code intuitive to follow.\n\nEvaluation Criteria:\n\nClarity of Variable Names: Assess whether the variable names are meaningful and self-explanatory. Good variable names should convey their purpose without needing extra comments, and should adhere to the target language's naming conventions. Poor naming can confuse readers and obscure the code's logic.\n\nLogical Structure and Flow: Evaluate the overall logical flow of the code. Well-structured code should have a natural, easy-to-follow progression, minimizing unnecessary jumps or convoluted logic. Code that flows logically makes it easier to understand the behavior and function of each section.\n\nConsistency with Target Language Readability Standards: Determine whether the translated code follows the target language's readability best practices, including common idioms, formatting conventions, and style guides. Consistent adherence to these standards enhances code clarity and maintainability.\n\nAvoidance of Overly Complex Constructions: Examine the code for complexity in expressions, conditionals, or function structures. Simplifying complex constructs where appropriate ensures that the code is easier to maintain, debug, and understand for future developers.\n\nScoring: Rate outputs on a scale of 1 (lowest) to 5 (highest):\n\n- Score 5 (Outstanding Readability): The code is exceptionally clear and easy to understand. Variable names are highly meaningful, logical structure flows naturally, and the translation fully adheres to the target language's readability standards. There are no unnecessary complexities, and the code is a model of clarity.\n\n- Score 4 (Strong Readability): The code is generally clear and easy to follow, with minor improvements needed in variable naming or logic flow. The code follows readability standards well, with only occasional complexity or minor deviations from best practices.\n\n- Score 3 (Adequate Readability): The code is moderately clear but requires effort to follow in some places. Variable names and logical structure are mostly adequate but may need refinement. There are some readability issues, such as slightly complex constructions or deviations from target language standards.\n\n- Score 2 (Poor Readability): The code has significant readability issues. Variable names are unclear or too abstract, the logical flow is hard to follow, and there are clear deviations from readability standards. Overly complex constructs make understanding difficult, and substantial improvement is required.\n\n- Score 1 (Very Poor Readability): The code is highly unclear and difficult to follow. Variable names are confusing or meaningless, logical structure is convoluted, and the code fails to follow basic readability standards for the target language. Complexities dominate, making the code nearly unreadable.\n\n\n Source code in {src_lang}:\n{source_code}\n\n Translated code in {trg_lang}:\n{translated_code}\n\nYour output should have two parts:\n- \"score\": A score from 1 to 5.\n- \"rationale\": A brief explanation justifying your score.\n\n"
  },
  {
    "name": "Error Handling",
    "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
    "url": "http://172.16.5.29:8000/v1",
    "prompt_template": "Assess how well the translated code implements error management techniques while maintains the original program's logic, ensuring that the target language's mechanisms are correctly employed while preserving the original code's error flow. The aim is to maintain clarity, accuracy, and effectiveness in error handling, from exception management to resource cleanup.\n\nEvaluation Criteria:\n\n- *Preservation of Exception Handling Mechanisms*: Evaluate if the exception handling, such as try-catch blocks or result-based error handling, is accurately translated. The translated code should retain the original structure of error flow, including fallback actions, ensuring that exceptions are handled predictably and effectively.\n\n- *Handling of Language-Specific Error Types*: Assess how well the LLM translates language-specific error types to equivalent types in the target language. The correct error type should be raised in corresponding situations to ensure that the error handling mechanisms function as intended.\n\n- *Proper Management of Resource Cleanup*: Evaluate whether resource cleanup mechanisms are preserved during translation. Resources such as file handles, and memory should be released appropriately even when errors occur.\n\n- *Clarity and Consistency of Error Logging*: Assess whether logging mechanisms for errors are clearly translated and consistent with the target language's conventions. Proper logging should be maintained, ensuring that errors are captured and reported in a way that aids debugging and operational monitoring.\n\nScoring: Rate outputs on a scale of 1 (lowest) to 5 (highest):\n\n- *Score 5 (Flawless Error Handling)*: The translated code flawlessly maintains the original error handling intent, including exception flow, error types, and resource cleanup. All error-related mechanisms are precisely adapted to the target language's standards, with no silent failures, broad catch blocks, or missed logs.\n\n- *Score 4 (Effective Error Handling with Minor Adjustments)*: The error handling mechanisms are well-preserved, with only minor adjustments needed to meet target language best practices. Exception flow and resource management are effectively translated, though small improvements in areas like logging or error type adaptation could enhance clarity.\n\n- *Score 3 (Adequate Error Handling with Noticeable Gaps)*: The translation maintains most of the original error handling structure, but noticeable gaps exist. Some language-specific error types are not handled properly, resource cleanup is partially preserved, or logging is inconsistent. These issues might lead to minor unintended behavior.\n\n- *Score 2 (Incomplete Error Handling)*: The error handling translation has significant issues. Exceptions may not propagate as intended, critical resource cleanup may be missing, or error types may not align with the target language's conventions. These issues could result in errors being mishandled or failing silently.\n\n- *Score 1 (Faulty Error Handling)*: The error handling in the translation is severely flawed or entirely missing. Exceptions do not propagate correctly, resources are not cleaned up, and error types are either not adapted or entirely lost. The code could result in unpredictable behavior due to unhandled errors.\n\n\n Source code in {src_lang}:\n{source_code}\n\n Translated code in {trg_lang}:\n{translated_code}\n\nYour output should have two parts:\n- \"score\": A score from 1 to 5.\n- \"rationale\": A brief explanation justifying your score.\n\n"
  },
  {
    "name": "Dependency and API",
    "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
    "url": "http://172.16.5.29:8000/v1",
    "prompt_template": "Evaluate the handling of API behavior differences and dependencies in code translation. Assess that functionality is preserved, compatibility is maintained, and the target language's dependency management practices are adhered to. The goal is to ensure that the code remains functional, efficient, and correctly integrated within the target environment.\n\nEvaluation Criteria:\n- *Preserve External Library Functionality and Adapt API Calls*: Assess if all external libraries from the source code are accurately mapped to their equivalents in the target language and if API calls are translated correctly. Ensure that function signatures, parameters, and return types are properly adapted while maintaining the original functionality.\n- *Ensure Compatibility and Handle Version Differences*: Evaluate if imported libraries and APIs are compatible with the target language's environment, and check if version differences are properly managed. Address any incompatibilities by updating code or libraries as needed to ensure seamless integration.\n- *Manage Dependencies and Use Target Language Tools*: Review how well dependencies are listed, managed, and resolved using the target language's native package management system. Ensure that there are no missing or untracked dependencies and that language-specific tools are used effectively.\n- *Replace Non-Portable Dependencies and Document Changes*: Ensure that non-portable dependencies in the source code are replaced with portable or cross-platform equivalents in the target language. Verify that all changes in dependencies or API usage are clearly documented to aid future maintenance.\n\nScoring: Rate outputs on a scale of 1 (lowest) to 5 (highest)\n- *Score 5 (Exemplary Handling of Dependencies and APIs)*: The translated code accurately preserves all external library functionalities and API calls, ensures full compatibility, manages dependencies flawlessly, and replaces non-portable dependencies effectively. Documentation of changes is clear and comprehensive, with no integration issues.\n- *Score 4 (Effective Management with Minor Issues)*: The translation effectively handles most dependencies and APIs with minor issues in adaptation or documentation. The code generally preserves functionality and compatibility, but small improvements could be made in managing library versions or dependency documentation.\n- *Score 3 (Adequate Handling with Noticeable Gaps)*: The translation shows adequate handling of dependencies and APIs, but with noticeable gaps. Functionality preservation might be partial, some API calls may need adjustment, or documentation could be improved, leading to potential issues in integration or compatibility.\n- *Score 2 (Incomplete or Problematic Dependency Management)*: The translation has significant issues with dependency and API handling. There are problems with functionality preservation, compatibility, or management of libraries, leading to errors or integration difficulties in the target environment.\n- *Score 1 (Faulty or Incomplete Dependency Handling)*: The translation exhibits severe flaws in managing dependencies and APIs. Essential functionality is lost, incompatible libraries are used, or dependencies are poorly documented, resulting in major issues with code execution and integration.\n\n\n Source code in {src_lang}:\n{source_code}\n\n Translated code in {trg_lang}:\n{translated_code}\n\nYour output should have two parts:\n- \"score\": A score from 1 to 5.\n- \"rationale\": A brief explanation justifying your score.\n\n"
  }
]
